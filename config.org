#+TITLE: Karl's Emacs Configuration
#+LAYOUT: post

* Introduction

Welcome to my Emacs configuration. This configuration is modelled on
Arjen Wiersma's configuration, which can be found [[https://gitlab.com/buildfunthings/emacs-config][in this repository]].

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Karl Ward")
(setq user-mail-address "karl.j.ward@gmail.com")
#+END_SRC

* Emacs customisations

A place to dump the customizations that Emacs sometimes generates.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat init-dir "custom.el"))
(load custom-file :noerror)
#+END_SRC

* The PATH 

Brew stores executables in */usr/local/bin* which we ensure is included
in Emacs's *exec-path*.

#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin")))
(setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
(setq exec-path (append exec-path '("/Library/TeX/texbin")))
(setenv "PATH" (concat "/Library/TeX/texbin:" (getenv "PATH")))
#+END_SRC

* Using use-package

The use-package package provides a pleasent interface for the installation
and configuration of packages.

** Setup

First we must configure the package package with a list of package archives.
We access the archives via HTTPS wherever possible.

#+BEGIN_SRC emacs-lisp
(require 'package)

(defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
(defvar melpa '("melpa" . "https://melpa.org/packages/"))
(defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
(defvar org-elpa '("org" . "https://orgmode.org/elpa/"))

(setq package-archives nil)

;; (add-to-list 'package-archives melpa-stable t)
(add-to-list 'package-archives melpa t)
(add-to-list 'package-archives gnu t)
(add-to-list 'package-archives org-elpa t)

(package-initialize)

(package-refresh-contents)
#+END_SRC

** Installing use-package

Now we can ensure that use-package is installed.

#+BEGIN_SRC emacs-lisp
(when (not (package-installed-p 'use-package))
  (let ((package-archives (list melpa)))
    (package-install 'use-package)))
#+END_SRC

* The GUI

Use the better defaults package to grab some important improvements over
the default settings.

#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :ensure t)
#+END_SRC

We turn off the mouse interface as soon as possible to avoid momentary display

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
#+END_SRC

Deal with the # character on UK mac keyboards being at alt-grave-3 (M-3 for us,)
and also the Euro symbol on alt-grave-4.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
(global-set-key (kbd "M-2") '(lambda () (interactive) (insert "â‚¬")))
#+END_SRC

Smooth mouse scrolling.

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Make Emacs write back up and auto save files to a centralised directory.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* Moving Around Emacs

Use y/n instead of yes/no.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Some global keys for entering useful modes that are not found in any
other use-package statement.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c d") 'dired)
(global-set-key (kbd "C-c o")
  (lambda ()
    (interactive)
    (find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c i")
  (lambda ()
    (interactive)
    (find-file "~/Documents/Org/all.org")))
#+END_SRC

We set the default flags for dired to list all files, provide human
readable byte counts and sort alphabetically.

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alhS")
#+END_SRC

** Switching Windows

Make it easy to switch between windows based on their physical layout.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>") 'windmove-left)
#+end_src

** Ido Mode

I like ido for M-x, file lists and so on. Everywhere it can be.

#+BEGIN_SRC emacs-lisp
(use-package ido-completing-read+
  :ensure t
  :config
    (ido-mode t)
    (ido-everywhere t)
    (ido-ubiquitous-mode t))

(use-package flx-ido
  :ensure t
  :config
    (flx-ido-mode t)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil))
#+END_SRC

For an even better M-x we include smex, which will list commands by
how frequently they are used.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :bind
    (("M-x" . smex)))
#+END_SRC

** Helm

   Trying out a bunch of helm packages

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind
    (("M-x" . helm-M-x)))
#+END_SRC

** Listing Buffers

Replace the default list-buffers with ibuffer. We group buffers by the version
control project they belong to.

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure t
  :bind (("C-x C-b" . ibuffer)))

(use-package ibuffer-vc
  :ensure t
  :config
    (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-vc-set-filter-groups-by-vc-root)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC

* Programming

Show matching parantheses. Useful when writing many programming languages.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c k" . docker))

(use-package dockerfile-mode
  :ensure t)
#+END_SRC
** Clojure

Install and configure cider and clj-refactor.

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :config
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'clojure-mode-hook #'display-line-numbers-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (setq cider-repl-use-pretty-printing t)
    (setq cider-repl-display-help-banner nil))

(use-package clj-refactor
  :ensure t
  :config
    (add-hook 'clojure-mode-hook #'clj-refactor-mode))
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
    (setq-default js2-basic-offset 2))
#+END_SRC

** Java

#+BEGIN_SRC emacs-lisp
(use-package gradle-mode
  :ensure t
  :config
    (setq 
      gradle-gradlew-executable "./gradlew"
      gradle-use-gradlew 't)
    (gradle-mode 1))
#+END_SRC

#+RESULTS:
: t

** PHP

#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :ensure t)
#+END_SRC

** Auto Completion

We use company mode for auto-completion. A C-c / will autocomplete at point.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :bind 
  (("C-c /" . company-complete)
  ("C-c \\" . company-show-doc-buffer))
  :config
  (setq company-idle-delay 0)
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Version Control

Include the wonderful magit, and an extension for git flow support.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config
    (setq vc-handled-backends nil)
  :bind (("C-c g" . magit-status)))

(use-package magit-gitflow
  :ensure t
  :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

(use-package forge
  :ensure t)

(use-package git-gutter
  :ensure t
  :init
    (global-git-gutter-mode +1))
#+END_SRC

** Tunnelling

We can manage SSH tunnels via emacs package `ssh-tunnels`.

#+BEGIN_SRC emacs-lisp
(use-package ssh-tunnels
  :ensure t
  :bind (("C-c u" . ssh-tunnels))
  :config 
  (setq ssh-tunnels-configurations
  '((:name "Boop Transmission"
     :local-port 9091
     :remote-port 9091
     :host "localhost"
     :login "boop"))))
#+END_SRC

** Projects

Projectile provides us with a way to switch between 'projects', find
files within projects, search and replace within projects, etc.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (add-hook 'prog-mode-hook 'projectile-mode)
    (setq projectile-switch-project-action 'projectile-dired))
#+END_SRC

#+RESULTS:
: t

Also use treemacs to display a filesystem tree for projectile projects.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind (("C-c t"   . treemacs)))

(use-package treemacs-projectile
  :ensure t
  :after treemacs projectile)
#+END_SRC

** Other Tools

A nice REST client.

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t)

(use-package company-restclient
  :ensure t
  :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC

And a mode for editing YAML.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

A little eshell config.

#+BEGIN_SRC emacs-lisp

(setq eshell-visual-commands '("redis-cli" "docker-compose"))
(setq eshell-visual-subcommands '(("git" "log" "diff" "show")))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

* Writing

We will occasionally use markdown, so let's get the mode for it.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :config
  (setq markdown-command "/usr/local/bin/markdown")
  (setq markdown-css-paths `(,"/Users/karl/Org/cv/style.css")))
#+END_SRC

** Editing text in Firefox

Via the GhostText firefox plugin, using atomic-chrome text areas in firefox can be edited in emacs.

#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :ensure t
  :config
    (atomic-chrome-start-server))
#+END_SRC

#+RESULTS:
: t

** Spellchecking

We use hunspell to perform spell checking of text buffers. Hunspell can
be installed via brew, and dictionaries by extracting them from the
English dictionaries add-on for OpenOffice.

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t
  :bind (("C-c s" . flyspell-buffer))
  :config
    (ispell-hunspell-add-multi-dic "en_GB")
    (setq-default ispell-program-name "hunspell")
    (setq ispell-dictionary "en_GB")
    (setq ispell-really-hunspell t))
#+END_SRC

** Dictionary


Look up words in the MacOS dictionary.

#+BEGIN_SRC emacs-lisp
(use-package osx-dictionary
  :ensure t
  :bind (("C-c w" . osx-dictionary-search-word-at-point)))
#+END_SRC

** Wikipedia

#+BEGIN_SRC emacs-lisp
(defun wikipedia-lookup-word-at-point ()
  (interactive)
  (let (word)
    (setq word
          (if (use-region-p)
              (buffer-substring-no-properties (region-beginning) (region-end))
            (current-word)))
    (setq word (replace-regexp-in-string " " "+" word))
    (eww (concat "https://en.m.wikipedia.org/w/index.php?search=" word))))

(global-set-key (kbd "C-c q") 'wikipedia-lookup-word-at-point)
#+END_SRC

** Note Taking

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind (("C-c n" . deft))
    :config (setq deft-recursive t
                  deft-directory "~/Documents/Org"
                  deft-extensions '("md" "org" "txt")))
#+END_SRC


* Look and Feel
** A Theme

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure f
  :config
    (load-theme 'solarized-light t)
    (set-default-font "Inconsolata-14")
    (set-face-attribute 'cursor nil :background "#6c71c4")
    (set-face-attribute 'header-line nil :box '(:line-width 2 :color "#eee8d5") 
                                         :background "#eee8d5"
                                         :underline nil 
                                         :overline nil)
    (set-face-attribute 'mode-line nil :box '(:line-width 2 :color "#eee8d5") 
                                       :underline nil 
                                       :overline nil)
    (set-face-attribute 'mode-line-inactive nil :box '(:line-width 2 :color "#eee8d5") 
                                                :underline nil 
                                                :overline nil)
    (set-face-attribute 'default nil :foreground "#1c1e1f")
    (set-face-attribute 'shadow nil :foreground "#646c70")
    (set-face-attribute 'variable-pitch nil :family "Merriweather" :height 140)
    (set-face-attribute 'font-lock-type-face nil :foreground nil :underline nil)
    (set-face-attribute 'org-level-1 nil :foreground nil)
    (set-face-attribute 'org-level-2 nil :foreground nil)
    (set-face-attribute 'org-level-3 nil :foreground nil)
    (set-face-attribute 'org-level-4 nil :foreground nil)
    (set-face-attribute 'org-level-5 nil :foreground nil)
    (set-face-attribute 'org-level-6 nil :foreground nil)
    (set-face-attribute 'org-meta-line nil :foreground "#646c70")
    (set-face-attribute 'cider-deprecated-face nil :background nil :underline "#b58900")
    (set-face-attribute 'cider-error-highlight-face nil :underline "red")
    (set-face-attribute 'font-lock-builtin-face nil :foreground "#1c1e1f")
    (set-face-attribute 'font-lock-keyword-face
      nil 
      :foreground nil
      :weight 'normal)
    (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
    (set-face-attribute 'font-lock-doc-face nil
      :foreground "#93a1a1"
      :slant 'italic)
    (set-face-attribute 'font-lock-function-name-face 
      nil 
      :foreground nil
      :weight 'unspecified
      :underline 't
      :slant 'unspecified)
    (set-face-attribute 'font-lock-constant-face 
      nil 
      :foreground nil 
      :weight 'bold)
    (set-face-attribute 'font-lock-preprocessor-face
      nil
      :foreground nil)
    (set-face-attribute 'font-lock-variable-name-face
      nil
      :foreground nil)
    (set-face-attribute 'font-lock-string-face 
      nil 
      :foreground nil
      :slant 'italic))
#+END_SRC

#+RESULTS:
: t

** The Frame

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
(setq visible-bell nil)
(setq-default cursor-type 'box)
(setq ring-bell-function 'ignore)
(setq inhibit-splash-screen t)
(fringe-mode nil)

(use-package ns-auto-titlebar
  :ensure t
  :config 
    (when (eq system-type 'darwin) (ns-auto-titlebar-mode))
    (setq frame-background-mode 'light)
    (mapc 'frame-set-background-mode (frame-list)))
#+END_SRC

* The Mode Line

Hide minor mode names in a menu.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config 
        (setq doom-modeline-height 25
              doom-modeline-buffer-file-name-style 'file-name
              doom-modeline-icon (display-graphic-p)))
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
(use-package org-plus-contrib
  :ensure t
  :bind (("C-c a" . org-agenda)
         ("C-c l" . org-store-link)
         ("C-c c" . org-capture)
         ("C-c b" . org-iswitchb))
  :config
    (require 'ox-confluence)
    (setq org-todo-keywords
      '((sequence "TODO(t!)" "STARTED(a!)" "WAITING(w@/!)" 
                  "|" "DONE(d)" "CANCELLED(c)"))
          org-startup-indented t
          org-pretty-entities t
          org-hide-emphasis-markers t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-src-fontify-natively t
          org-ellipsis " ..."
          org-babel-clojure-backend 'cider
          org-directory "~/Org"
          org-default-notes-file (concat org-directory "/capture.org")))

(use-package mixed-pitch
  :ensure t
  :config
    (setq mixed-pitch-variable-pitch-cursor nil)
    (add-hook 'markdown-mode-hook
      (lambda ()
        (mixed-pitch-mode 1)))
    (add-hook 'org-mode-hook
      (lambda ()
        (mixed-pitch-mode 1))))

(use-package org-bullets
  :ensure t
  :config
    (add-hook 'org-mode-hook 
      (lambda () 
        (org-bullets-mode 1)
        (variable-pitch-mode 1)
        (setq left-margin-width 2
              right-margin-width 2
              line-spacing 0.1)
        (set-window-buffer nil (current-buffer)))))
#+END_SRC

emacs-htmlize for html export

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC

* Feed Reader

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t
  :bind (("C-c f" . elfeed))
  :config
    (setq shr-width 80)
    (setq elfeed-db-directory "~/.emacs.d/elfeed"))

(use-package elfeed-org
  :ensure t
  :config
    (setq rmh-elfeed-org-files (list "~/Documents/Org/feeds.org"))
    (elfeed-org))
#+END_SRC

* Hacker News Reader

#+BEGIN_SRC emacs-lisp
(use-package hackernews
  :ensure t
  :bind (("C-c h" . hackernews)))
#+END_SRC

* TripAdvisor

Environment variables for the viator NSP codebase.

#+BEGIN_SRC emacs-lisp
(setenv "VIATOR_CODE" "/Users/kward/P/viator")
(setenv "VIATOR_ENVIRONMENT" "zelda")
(setenv "VIATOR_POP" "oxf1")
(setenv "viator_pop" "oxf1")
(setenv "TEAM_ENVIRONMENT" "zelda")
(setenv "VIATOR_SUPPLIER_CENTRE" "~/P/viator/supply-platform/services/application-services/supplier-centre")
(setenv "DISABLE_JREBEL" "false")
(setenv "NVM_DIR" "~/.nvm")
(setenv "VM_NUM" "99")
#+END_SRC

Visual regex using PCRE.

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
  :ensure t
  :bind (("C-c r" . vr/query-replace)))

(use-package visual-regexp-steroids
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :ensure t)
#+END_SRC

